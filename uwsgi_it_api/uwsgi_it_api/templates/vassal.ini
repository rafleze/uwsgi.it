[uwsgi]
strict = true
plugins = tuntap,quota,eventfd,console_broadcast,alarm_chain,rand_pid,openat_alarm

vassals-set = inject-before=/opt/unbit/uwsgi/shortcuts.ini

auto-procname = true
procname-prefix-spaced = [{{container.uid}}]

; set alarms dir
openat-alarm-dir = /etc/uwsgi/alarms

; set HOME
hook-asap = putenv:HOME=/containers/{{container.uid}}
; set quota
hook-asap = setquota:{{container.server.hd}} {{container.uid}} {{container.quota}}

; create home
if-not-dir = /containers/{{container.uid}}
hook-asap = mkdir:/containers/{{container.uid}}
endif =
; chown2 does not call getpwnam/getgrnam
hook-asap = chown2:/containers/{{container.uid}} {{container.uid}} {{container.uid}}
; chmod home
hook-asap = chmod:/containers/{{container.uid}} 755

; create /run
if-not-dir = /containers/{{container.uid}}/run
hook-asap = mkdir:/containers/{{container.uid}}/run
endif =
hook-asap = chown:/containers/{{container.uid}}/run {{container.uid}} {{container.uid}}
; create /run/resolvconf
if-not-dir = /containers/{{container.uid}}/run/resolvconf
hook-asap = mkdir:/containers/{{container.uid}}/run/resolvconf
endif =
; create /run/spool
if-not-dir = /containers/{{container.uid}}/run/spool
hook-asap = mkdir:/containers/{{container.uid}}/run/spool
endif =
hook-asap = chown:/containers/{{container.uid}}/run/spool {{container.uid}} {{container.uid}}
; create /run/shm
if-not-dir = /containers/{{container.uid}}/run/shm
hook-asap = mkdir:/containers/{{container.uid}}/run/shm
endif =
hook-asap = chown:/containers/{{container.uid}}/run/shm {{container.uid}} {{container.uid}}
; create /run/php
if-not-dir = /containers/{{container.uid}}/run/php
hook-asap = mkdir:/containers/{{container.uid}}/run/php
endif =
hook-asap = chown:/containers/{{container.uid}}/run/php {{container.uid}} {{container.uid}}


; create cgroup context
if-not-dir = /sys/fs/cgroup/{{container.cgroup_uid}}
hook-asap = mkdir:/sys/fs/cgroup/{{container.cgroup_uid}}
endif =

; set cgroup limits
hook-asap = write:/sys/fs/cgroup/{{container.cgroup_uid}}/memory.limit_in_bytes {{container.memory_limit_in_bytes}}
hook-asap = write:/sys/fs/cgroup/{{container.cgroup_uid}}/memory.swappiness 0

; create /run/subscribe
if-not-dir = /containers/{{container.uid}}/run/subscribe
hook-asap = mkdir:/containers/{{container.uid}}/run/subscribe
endif =

; create /run/cgroup
if-not-dir = /containers/{{container.uid}}/run/cgroup
hook-asap = mkdir:/containers/{{container.uid}}/run/cgroup
endif =

; place process in the cgroup
cgroup-dir-mode = 755
cgroup = /sys/fs/cgroup/{{container.cgroup_uid}}/
; attach an alarm on cgroup OOM
alarm = console console_broadcast:
alarm = emperorlog log:
alarm = jsonfile openat_alarm:

{% if container.jid and container.jid_secret and container.jid_destinations %}
plugin = strophe
alarm = xmpp strophe:{{container.jid}} {{container.jid_secret}} {{container.jid_destinations}}
{% endif %}
{% if container.pushover_user and container.pushover_token %}
plugin = pushover
{% if container.pushover_sound %}
alarm = pushover pushover:token={{container.pushover_token}},user={{container.pushover_user}},sound={{container.pushover_sound}}
{% else %}
alarm = pushover pushover:token={{container.pushover_token}},user={{container.pushover_user}}
{% endif %}
{% endif %}

{% if container.pushbullet_token %}
plugin = pushbullet
alarm = pushbullet pushbullet:token={{container.pushbullet_token}},title=uwsgi.it container {{container.uid}}
{% endif %}

{% if container.slack_webhook %}
plugin = slack
alarm = slack slack:webhook_url={{container.slack_webhook}},username={{container.hostname}}/{{container.uid}}@{{container.server.address}},icon_emoji=:heavy_exclamation_mark:
{% endif %}

{% if container.combo_alarms %}
alarm = combo chain:console,emperorlog,jsonfile,{{container.combo_alarms}}
{% else %}
alarm = combo chain:console,emperorlog,jsonfile
{% endif %}

alarm-eventfd = "combo:container {{container.uid}}: OUT OF MEMORY !!!" /run/cgroup/cgroup.event_control /run/cgroup/memory.oom_control
; attach an alarm on quota
alarm-quota = combo {{container.server.hd}} {{container.quota_threshold}}
; no more than 1 alarm per minute
alarm-freq = {{container.alarm_freq}}

; create vassals directory
if-not-dir = /containers/{{container.uid}}/vassals
hook-asap = mkdir:/containers/{{container.uid}}/vassals
endif =
hook-asap = chown:/containers/{{container.uid}}/vassals {{container.uid}} {{container.uid}}

; commodity directory for having a /container/<uid>
if-not-dir = /containers/{{container.uid}}/.old_root
hook-asap = mkdir:/containers/{{container.uid}}/.old_root
endif =
if-not-dir = /containers/{{container.uid}}/.old_root/{{container.uid}}
hook-asap = mkdir:/containers/{{container.uid}}/.old_root/{{container.uid}}
endif =
hook-asap = chown:/containers/{{container.uid}}/.old_root {{container.uid}} {{container.uid}}
hook-asap = chown:/containers/{{container.uid}}/.old_root/{{container.uid}} {{container.uid}} {{container.uid}}


; create /tmp
if-not-dir = /containers/{{container.uid}}/tmp
hook-asap = mkdir:/containers/{{container.uid}}/tmp
endif =
hook-asap = chown:/containers/{{container.uid}}/tmp {{container.uid}} {{container.uid}}

; create /logs
if-not-dir = /containers/{{container.uid}}/logs
hook-asap = mkdir:/containers/{{container.uid}}/logs
endif =
hook-asap = chown:/containers/{{container.uid}}/logs {{container.uid}} {{container.uid}}

; logs/lastlog
if-not-file = /containers/{{container.uid}}/logs/lastlog
hook-asap = creat:/containers/{{container.uid}}/logs/lastlog
endif =

; create /etc
if-not-dir = /containers/{{container.uid}}/etc
hook-asap = mkdir:/containers/{{container.uid}}/etc
endif =
hook-asap = chown:/containers/{{container.uid}}/etc {{container.uid}} {{container.uid}}
; /etc/hosts
if-not-file = /containers/{{container.uid}}/etc/hosts
{% for host in container.server.etc_hosts_lines %}
hook-asap = appendn:/containers/{{container.uid}}/etc/hosts {{host}}
{% endfor %}
endif = 
hook-asap = chown:/containers/{{container.uid}}/etc/hosts {{container.uid}} {{container.uid}}
; /etc/resolv.conf
if-not-file = /containers/{{container.uid}}/etc/resolv.conf
{% for line in container.server.etc_resolv_conf_lines %}
hook-asap = appendn:/containers/{{container.uid}}/etc/resolv.conf {{line}}
{% endfor %}
endif =
hook-asap = chown:/containers/{{container.uid}}/etc/resolv.conf {{container.uid}} {{container.uid}}
; /etc/hostname
hook-asap = writen:/containers/{{container.uid}}/etc/hostname {{container.hostname}}
hook-asap = chown:/containers/{{container.uid}}/etc/hostname {{container.uid}} {{container.uid}}

; /etc/nullmailer
if-not-dir = /containers/{{container.uid}}/etc/nullmailer
hook-asap = mkdir:/containers/{{container.uid}}/etc/nullmailer
endif =
hook-asap = chown:/containers/{{container.uid}}/etc/nullmailer {{container.uid}} {{container.uid}}

; etc/uwsgi.key and etc/uwsgi.pubkey (reset them at every container restart)
if-file = /containers/{{container.uid}}/etc/uwsgi.key
hook-asap = unlink:/containers/{{container.uid}}/etc/uwsgi.key
endif = 
{% for line in container.customer.rsa_key_lines %}
hook-asap = !appendn:/containers/{{container.uid}}/etc/uwsgi.key {{line}}
{% endfor %}
if-file = /containers/{{container.uid}}/etc/uwsgi.pubkey
hook-asap = unlink:/containers/{{container.uid}}/etc/uwsgi.pubkey
endif =
{% for line in container.customer.rsa_pubkey_lines %}
hook-asap = !appendn:/containers/{{container.uid}}/etc/uwsgi.pubkey {{line}}
{% endfor %}

; create/fix ssh access
if-not-dir = /containers/{{container.uid}}/.ssh
hook-asap = mkdir:/containers/{{container.uid}}/.ssh
endif =
hook-asap = chown:/containers/{{container.uid}}/.ssh {{container.uid}} {{container.uid}}

; regenerate keys only if the uwsgi_authorized_keys file does not exist
if-not-file = /containers/{{container.uid}}/.ssh/uwsgi_authorized_keys
{% for key in container.ssh_keys %}
hook-asap = !appendn:/containers/{{container.uid}}/.ssh/uwsgi_authorized_keys {{key}}
{% endfor %}
endif =

; create distros if needed
{% if container.custom_distros_storage %}
if-not-dir = /containers/{{container.uid}}/distros
hook-asap = mkdir:/containers/{{container.uid}}/distros
endif =
hook-asap = chown2:/containers/{{container.uid}}/distros {{container.uid}} {{container.uid}}
{% endif %}

; set hostname
hook-asap = hostname:{{container.hostname}}

; force the master to consider itself 'jailed', even if jailing was managed by the main Emperor
jailed = true
; reloading does not exist for this instance (when it is changed we need to destroy the whole container)
exit-on-reload = true

; now we change the mountpoints view of the container
hook-pre-jail = callret:chdir /

; are we using a custom_distro ?
{% if container.custom_distro and not container.custom_distros_storage and container.custom_distro.container.server == container.server and container.custom_distro.container.customer == container.customer %}
if-dir = /containers/{{container.custom_distro.container.uid}}/distros/{{container.custom_distro.path}}/.old_root
hook-pre-jail = mount:none /containers/{{container.custom_distro.container.uid}}/distros/{{container.custom_distro.path}} /ns bind
hook-as-user = safeexec:/bin/sh /etc/rc.local &
endif =
; mount the fallback distro on /ns
if-not-dir = /containers/{{container.custom_distro.container.uid}}/distros/{{container.custom_distro.path}}/.old_root
hook-master-start = alarm:combo [DANGER] /containers/{{container.custom_distro.container.uid}}/distros/{{container.custom_distro.path}}/.old_root does not exist as a custom distro
hook-pre-jail = mount:none /distros/{{container.distro.path}} /ns bind
endif =
if-not-dir = /containers/{{container.custom_distro.container.uid}}/distros/{{container.custom_distro.path}}/containers
hook-master-start = alarm:combo [DANGER] /containers/{{container.custom_distro.container.uid}}/distros/{{container.custom_distro.path}}/containers does not exist as a custom distro
endif =
{% else %}
; mount the distro on /ns
hook-pre-jail = mount:none /distros/{{container.distro.path}} /ns bind
{% endif %}

pivot_root = /ns /ns/.old_root


; mount /proc
hook-as-root = mount:proc none /proc nodev hidepid=2
; bind /dev
hook-as-root = mount:none /.old_root/dev /dev bind
; bind /dev/pts
hook-as-root = mount:none /.old_root/dev/pts /dev/pts bind
; map /containers/<uid>
hook-as-root = mount:none /.old_root/containers/{{container.uid}}/.old_root /containers bind
hook-as-root = mount:none /.old_root/containers/{{container.uid}} /containers/{{container.uid}} bind
; map /run
hook-as-root = mount:none /containers/{{container.uid}}/run /run bind,nosuid
; mount /run/shm
hook-as-root = mount:tmpfs none /run/shm nodev
; map /tmp
hook-as-root = mount:none /containers/{{container.uid}}/tmp /tmp bind,nosuid
hook-as-root = mount:none /containers/{{container.uid}}/tmp /var/tmp bind,nosuid
; bind /subscribe to /run/subscribe
hook-as-root = mount:none /.old_root/subscribe /run/subscribe bind
; bind /sys/fs/cgroup/<uid> to /run/cgroup
hook-as-root = mount:none /.old_root/sys/fs/cgroup/{{container.cgroup_uid}} /run/cgroup bind
; umount old fs
hook-as-root = umount:/.old_root rec,detach
; remount root with nosuid
hook-as-root = mount:none none / remount,nosuid
; remount home with nosuid
hook-as-root = mount:none /containers/{{container.uid}} /containers/{{container.uid}} remount,nosuid

; bind mount resolvconf
hook-as-root = mount:none /containers/{{container.uid}}/etc /run/resolvconf bind

; bind mount /etc/nullmailer
{% if not container.custom_distro %}
if-dir = /distros/{{container.distro.path}}/etc/nullmailer
hook-as-root = mount:none /containers/{{container.uid}}/etc/nullmailer /etc/nullmailer bind
endif =
{% endif %}

; bind logs to /var/log
hook-as-root = mount:none /containers/{{container.uid}}/logs /var/log bind,nosuid

; bind /run/spool to /var/spool
hook-as-root = mount:none /containers/{{container.uid}}/run/spool /var/spool bind,nosuid

{% if not container.custom_distro %}
; bind /run/php to /var/lib/php5
if-dir = /distros/{{container.distro.path}}/var/lib/php5
hook-as-root = mount:none /containers/{{container.uid}}/run/php /var/lib/php5 bind,nosuid
endif =
if-dir = /distros/{{container.distro.path}}/var/lib/php
hook-as-root = mount:none /containers/{{container.uid}}/run/php /var/lib/php bind,nosuid
endif =
{% endif %}

; bind home to /usr/local
hook-as-root = mount:none /containers/{{container.uid}} /usr/local bind,nosuid

; allows full usage of shared memory (this proc file is per-container)
hook-as-root = write:/proc/sys/kernel/shmmax {{container.memory_limit_in_bytes}}
; randomize pid sequence
hook-as-root = rand_pid:/proc/sys/kernel/ns_last_pid

; setup networking
hook-as-root = exec:ifconfig lo up
hook-as-root = exec:ifconfig uwsgi0 {{container.ip}} netmask 255.0.0.0 up
{% if not container.dmz %}
hook-as-root = exec:route add default gw 10.0.0.1
{% endif %}
hook-as-root = chown:/containers/{{container.uid}}/logs/emperor.log {{container.uid}} {{container.uid}}

tuntap-device = uwsgi0 /run/tuntap_router.socket
tuntap-use-credentials = true

; setup firewall
{% for link in container.links %}
tuntap-device-rule = {{link.direction}} {{link.src}}/{{link.src_mask}} {{link.dst}}/{{link.dst_mask}} {{link.action}} {{link.target}}
{% endfor %}
tuntap-device-rule = in 10.0.0.0/8 0.0.0.0 deny
tuntap-device-rule = out 0.0.0.0 10.0.0.0/8 deny

{% for rule in container.rule_set.all %}
tuntap-device-rule = {{rule.direction}} {{rule.src}} {{rule.dst}} {{rule.action}} {{rule.target}}
{% endfor %}

; finally drop privileges
uid = {{container.uid}}
gid = {{container.uid}}

logto = /containers/{{container.uid}}/logs/emperor.log
log-maxsize = 209715200

; spawn the Emperor
emperor = /containers/{{container.uid}}/vassals
emperor-stats-server = 127.0.0.1:5000

setns-socket = /run/ns.socket
setns-preopen = true

subscriptions-use-credentials = true

hook-emperor-stop = console_broadcast:container "{{container.name}}" is restarting ...
hook-emperor-reload = %(hook-emperor-stop)
hook-emperor-lost = %(hook-emperor-stop)

notify-socket = /run/notify.socket
hook-master-start = chmod:/run/notify.socket 666

{% if container.nofollow %}
emperor-nofollow = true
{% endif %}

if-file = /containers/{{container.uid}}/etc/rc.local
hook-as-user = safeexec:/bin/sh /containers/{{container.uid}}/etc/rc.local &
endif =

emperor-wrapper-override = /containers/{{container.uid}}/bin/uwsgi
emperor-wrapper-override = /usr/local/bin/uwsgi
